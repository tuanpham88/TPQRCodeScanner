// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TPQRCodeScanner
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import Swift
@_exported import TPQRCodeScanner
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TPQRCodePreview : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol TPQRCodeScannerViewDelegate : AnyObject {
  func qrCodeScanner(_ view: TPQRCodeScanner.TPQRCodeScannerView, didFailure error: TPQRCodeScanner.TPQRCodeScannerError)
  func qrCodeScanner(_ view: TPQRCodeScanner.TPQRCodeScannerView, didSuccess code: Swift.String)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class TPQRCodeScannerView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public func configure(focusColor: UIKit.UIColor? = nil, delegate: any TPQRCodeScanner.TPQRCodeScannerViewDelegate)
  @_Concurrency.MainActor(unsafe) public func startRunning()
  @_Concurrency.MainActor(unsafe) public func stopRunning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TPQRCodeScanner.TPQRCodeScannerView : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
public enum TPQRCodeScannerError : Swift.Error {
  case unauthorized(AVFoundation.AVAuthorizationStatus)
  case deviceFailure(TPQRCodeScanner.TPQRCodeScannerError.DeviceError)
  case readFailure
  case unknown
  public enum DeviceError {
    case videoUnavailable
    case inputInvalid
    case metadataOutputFailure
    case videoDataOutputFailure
    public static func == (a: TPQRCodeScanner.TPQRCodeScannerError.DeviceError, b: TPQRCodeScanner.TPQRCodeScannerError.DeviceError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TPQRCodeScanner.TPQRCodeScannerError.DeviceError : Swift.Equatable {}
extension TPQRCodeScanner.TPQRCodeScannerError.DeviceError : Swift.Hashable {}
